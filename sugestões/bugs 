<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Central de Bugs e Melhorias do ChatBoyAI</title>
  <style>
    /* Reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #f4f4ff, #e6f7ff);
      color: #333;
      line-height: 1.6;
      overflow-x: hidden;
    }

    a {
      color: inherit;
      text-decoration: none;
    }

    h1, h2, h3 {
      font-weight: 600;
    }

    button {
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .container {
      max-width: 1200px;
      margin: auto;
      padding: 1rem;
    }

    header {
      text-align: center;
      padding: 2rem 1rem;
      background-color: #007BFF;
      color: white;
    }

    header h1 {
      font-size: 2rem;
    }

    header p {
      margin-top: 0.5rem;
      font-size: 1.1rem;
    }

    form {
      background: white;
      padding: 1.5rem;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 2rem;
      animation: fadeInUp 0.6s ease-in-out;
    }

    form input,
    form select,
    form textarea {
      width: 100%;
      padding: 0.75rem;
      margin-bottom: 1rem;
      border: 1px solid #ccc;
      border-radius: 6px;
      font-size: 1rem;
    }

    form button {
      background-color: #007BFF;
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 6px;
      font-size: 1rem;
    }

    form button:hover {
      background-color: #0056b3;
    }

    .confirmation {
      text-align: center;
      margin-top: 1rem;
      font-weight: bold;
      color: green;
      opacity: 0;
      transform: translateY(-10px);
      transition: all 0.5s ease;
    }

    .confirmation.show {
      opacity: 1;
      transform: translateY(0);
    }

    .filters {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      align-items: center;
      justify-content: center;
      margin-bottom: 1.5rem;
    }

    .filters input[type="text"] {
      flex: 1;
      min-width: 200px;
      padding: 0.5rem;
      border: 1px solid #ccc;
      border-radius: 6px;
    }

    .filters button {
      padding: 0.5rem 1rem;
      border-radius: 6px;
      border: none;
      background-color: #007BFF;
      color: white;
      font-weight: bold;
    }

    .filters button.active {
      background-color: #0056b3;
    }

    .cards {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 1.5rem;
    }

    .card {
      background: white;
      border-radius: 10px;
      padding: 1rem;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      animation: fadeInUp 0.5s ease-in-out;
    }

    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .card-header span {
      font-weight: bold;
    }

    .type-bug::before {
      content: "üêû ";
    }

    .type-suggestion::before {
      content: "üí° ";
    }

    .card p {
      margin: 0.5rem 0;
    }

    .vote {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-top: 0.5rem;
      cursor: pointer;
    }

    .vote span {
      font-size: 1.2rem;
    }

    .counter {
      display: inline-block;
      font-weight: bold;
      transition: transform 0.3s ease, color 0.3s ease;
    }

    .voted .counter {
      transform: scale(1.2);
      color: #007BFF;
    }

    footer {
      text-align: center;
      padding: 2rem 1rem;
      background-color: #f0f0f0;
      margin-top: 2rem;
    }

    footer a {
      margin: 0 1rem;
      color: #007BFF;
      font-weight: bold;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @media (max-width: 600px) {
      header h1 {
        font-size: 1.5rem;
      }

      header p {
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>
  <header>
    <h1>Central de Bugs e Melhorias do ChatBoyAI</h1>
    <p>Ajude a melhorar nossos bots com suas ideias!</p>
  </header>

  <div class="container">
    <form id="feedback-form">
      <label for="name">Nome:</label>
      <input type="text" id="name" required />

      <label for="type">Tipo:</label>
      <select id="type">
        <option value="Sugest√£o">Sugest√£o</option>
        <option value="Bug">Bug</option>
      </select>

      <label for="description">Descri√ß√£o detalhada:</label>
      <textarea id="description" rows="4" required></textarea>

      <button type="submit">Enviar</button>
      <div class="confirmation" id="confirmation">Obrigado por contribuir!</div>
    </form>

    <div class="filters">
      <input type="text" id="search" placeholder="Buscar..." />
      <button data-filter="all" class="active">Todos</button>
      <button data-filter="Bug">Bugs</button>
      <button data-filter="Sugest√£o">Sugest√µes</button>
    </div>

    <div class="cards" id="cards-container"></div>
  </div>

  <footer>
    <p>
      <a href="https://discord.gg/9U9WnfF9"  target="_blank">Discord</a> | 
      <a href="https://instagram.com/chatboyai"  target="_blank">@chatboyai</a>
    </p>
  </footer>

  <script>
    const feedbackForm = document.getElementById("feedback-form");
    const confirmation = document.getElementById("confirmation");
    const cardsContainer = document.getElementById("cards-container");
    const filtersButtons = document.querySelectorAll(".filters button");
    const searchInput = document.getElementById("search");

    let feedbacks = [];

    function renderCards() {
      cardsContainer.innerHTML = "";
      const filter = Array.from(filtersButtons).find(b => b.classList.contains("active")).dataset.filter;
      const searchTerm = searchInput.value.toLowerCase();

      const filtered = feedbacks.filter(feedback => {
        return (filter === "all" || feedback.type === filter) &&
          (feedback.description.toLowerCase().includes(searchTerm) ||
           feedback.name.toLowerCase().includes(searchTerm));
      });

      filtered.forEach((feedback, index) => {
        const card = document.createElement("div");
        card.className = "card";
        card.style.animationDelay = `${index * 0.1}s`;

        card.innerHTML = `
          <div class="card-header">
            <span>${feedback.name}</span>
            <span class="type-${feedback.type === "Bug" ? "bug" : "suggestion"}">${feedback.type}</span>
          </div>
          <p>${feedback.description.substring(0, 100)}${feedback.description.length > 100 ? "..." : ""}</p>
          <div class="vote" onclick="toggleVote(${feedback.id})">
            <span>üëç</span>
            <span class="counter" id="count-${feedback.id}">${feedback.votes}</span>
          </div>
        `;
        cardsContainer.appendChild(card);
      });
    }

    function toggleVote(id) {
      const feedback = feedbacks.find(f => f.id === id);
      if (!feedback.voted) {
        feedback.votes++;
        feedback.voted = true;
      } else {
        feedback.votes--;
        feedback.voted = false;
      }
      renderCards();
    }

    window.toggleVote = toggleVote;

    feedbackForm.addEventListener("submit", (e) => {
      e.preventDefault();
      const name = document.getElementById("name").value.trim();
      const type = document.getElementById("type").value;
      const description = document.getElementById("description").value.trim();

      if (!name || !description) return;

      const newFeedback = {
        id: Date.now(),
        name,
        type,
        description,
        votes: 0,
        voted: false
      };

      feedbacks.unshift(newFeedback);
      feedbackForm.reset();
      confirmation.classList.add("show");
      setTimeout(() => confirmation.classList.remove("show"), 3000);
      renderCards();
    });

    filtersButtons.forEach(button => {
      button.addEventListener("click", () => {
        filtersButtons.forEach(btn => btn.classList.remove("active"));
        button.classList.add("active");
        renderCards();
      });
    });

    searchInput.addEventListener("input", renderCards);

    // Initial render
    renderCards();
  </script>
</body>
</html>